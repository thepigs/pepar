/* soapStub.h
   Generated by gSOAP 2.7.17 from fe_schema.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_fe	"urn:pepar:fe"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_fe__fe_status_t
#define SOAP_TYPE_fe__fe_status_t (14)
/* Bitmask fe:fe_status_t */
enum fe__fe_status_t {fe__fe_status_t__FE_HAS_SIGNAL = 1, fe__fe_status_t__FE_HAS_CARRIER = 2, fe__fe_status_t__FE_HAS_VITERBI = 4, fe__fe_status_t__FE_HAS_SYNC = 8, fe__fe_status_t__FE_HAS_LOCK = 16, fe__fe_status_t__FE_TIMEDOUT = 32, fe__fe_status_t__FE_REINIT = 64};
#endif

#ifndef SOAP_TYPE_fe__fe_caps_t
#define SOAP_TYPE_fe__fe_caps_t (15)
/* Bitmask fe:fe_caps_t */
enum fe__fe_caps_t {fe__fe_caps_t__FE_IS_STUPID = 1, fe__fe_caps_t__FE_CAN_INVERSION_AUTO = 2, fe__fe_caps_t__FE_CAN_FEC_1_2 = 4, fe__fe_caps_t__FE_CAN_FEC_2_3 = 8, fe__fe_caps_t__FE_CAN_FEC_3_4 = 16, fe__fe_caps_t__FE_CAN_FEC_4_5 = 32, fe__fe_caps_t__FE_CAN_FEC_5_6 = 64, fe__fe_caps_t__FE_CAN_FEC_6_7 = 128, fe__fe_caps_t__FE_CAN_FEC_7_8 = 256, fe__fe_caps_t__FE_CAN_FEC_8_9 = 512, fe__fe_caps_t__FE_CAN_FEC_AUTO = 1024, fe__fe_caps_t__FE_CAN_QPSK = 2048, fe__fe_caps_t__FE_CAN_QAM_16 = 4096, fe__fe_caps_t__FE_CAN_QAM_32 = 8192, fe__fe_caps_t__FE_CAN_QAM_64 = 16384, fe__fe_caps_t__FE_CAN_QAM_128 = 32768, fe__fe_caps_t__FE_CAN_QAM_256 = 65536, fe__fe_caps_t__FE_CAN_QAM_AUTO = 131072, fe__fe_caps_t__FE_CAN_TRANSMISSION_MODE_AUTO = 262144, fe__fe_caps_t__FE_CAN_BANDWIDTH_AUTO = 524288, fe__fe_caps_t__FE_CAN_GUARD_INTERVAL_AUTO = 1048576, fe__fe_caps_t__FE_CAN_HIERARCHY_AUTO = 2097152, fe__fe_caps_t__FE_CAN_8VSB = 4194304, fe__fe_caps_t__FE_CAN_16VSB = 8388608, fe__fe_caps_t__FE_HAS_EXTENDED_CAPS = 16777216, fe__fe_caps_t__FE_CAN_2G_MODULATION = 33554432, fe__fe_caps_t__FE_NEEDS_BENDING = 67108864, fe__fe_caps_t__FE_CAN_RECOVER = 134217728, fe__fe_caps_t__FE_CAN_MUTE_TS = 268435456};
#endif

#ifndef SOAP_TYPE_fe__fe_type_t
#define SOAP_TYPE_fe__fe_type_t (16)
/* fe:fe_type_t */
enum fe__fe_type_t {fe__fe_type_t__FE_QPSK = 0, fe__fe_type_t__FE_QAM = 1, fe__fe_type_t__FE_OFDM = 2, fe__fe_type_t__FE_ATSC = 3};
#endif

#ifndef SOAP_TYPE_fe__fe_spectral_inversion_t
#define SOAP_TYPE_fe__fe_spectral_inversion_t (17)
/* fe:fe_spectral_inversion_t */
enum fe__fe_spectral_inversion_t {fe__fe_spectral_inversion_t__INVERSION_OFF = 0, fe__fe_spectral_inversion_t__INVERSION_ON = 1, fe__fe_spectral_inversion_t__INVERSION_AUTO = 2};
#endif

#ifndef SOAP_TYPE_fe__fe_code_rate_t
#define SOAP_TYPE_fe__fe_code_rate_t (18)
/* fe:fe_code_rate_t */
enum fe__fe_code_rate_t {fe__fe_code_rate_t__FEC_NONE = 0, fe__fe_code_rate_t__FEC_1_2 = 1, fe__fe_code_rate_t__FEC_2_3 = 2, fe__fe_code_rate_t__FEC_3_4 = 3, fe__fe_code_rate_t__FEC_4_5 = 4, fe__fe_code_rate_t__FEC_5_6 = 5, fe__fe_code_rate_t__FEC_6_7 = 6, fe__fe_code_rate_t__FEC_8_9 = 7, fe__fe_code_rate_t__FEC_3_5 = 8, fe__fe_code_rate_t__FEC_9_10 = 9};
#endif

#ifndef SOAP_TYPE_fe__fe_modulation_t
#define SOAP_TYPE_fe__fe_modulation_t (19)
/* fe:fe_modulation_t */
enum fe__fe_modulation_t {fe__fe_modulation_t__QPSK = 0, fe__fe_modulation_t__QAM_16 = 1, fe__fe_modulation_t__QAM_32 = 2, fe__fe_modulation_t__QAM_64 = 3, fe__fe_modulation_t__QAM_128 = 4, fe__fe_modulation_t__QAM_256 = 5, fe__fe_modulation_t__QAM_AUTO = 6, fe__fe_modulation_t__VSB_8 = 7, fe__fe_modulation_t__VSB_16 = 8, fe__fe_modulation_t__PSK_8 = 9, fe__fe_modulation_t__APSK_16 = 10, fe__fe_modulation_t__APSK_32 = 11, fe__fe_modulation_t__DQPSK = 12};
#endif

#ifndef SOAP_TYPE_fe__fe_transmit_mode_t
#define SOAP_TYPE_fe__fe_transmit_mode_t (20)
/* fe:fe_transmit_mode_t */
enum fe__fe_transmit_mode_t {fe__fe_transmit_mode_t__TRANSMISSION_MODE_2K = 0, fe__fe_transmit_mode_t__TRANSMISSION_MODE_8K = 1, fe__fe_transmit_mode_t__TRANSMISSION_MODE_AUTO = 2, fe__fe_transmit_mode_t__TRANSMISSION_MODE_4K = 3};
#endif

#ifndef SOAP_TYPE_fe__fe_bandwidth_t
#define SOAP_TYPE_fe__fe_bandwidth_t (21)
/* fe:fe_bandwidth_t */
enum fe__fe_bandwidth_t {fe__fe_bandwidth_t__BANDWIDTH_8_MHZ = 0, fe__fe_bandwidth_t__BANDWIDTH_7_MHZ = 1, fe__fe_bandwidth_t__BANDWIDTH_6_MHZ = 2, fe__fe_bandwidth_t__BANDWIDTH_AUTO = 3};
#endif

#ifndef SOAP_TYPE_fe__fe_guard_interval_t
#define SOAP_TYPE_fe__fe_guard_interval_t (22)
/* fe:fe_guard_interval_t */
enum fe__fe_guard_interval_t {fe__fe_guard_interval_t__GUARD_INTERVAL_1_32 = 0, fe__fe_guard_interval_t__GUARD_INTERVAL_1_16 = 1, fe__fe_guard_interval_t__GUARD_INTERVAL_1_8 = 2, fe__fe_guard_interval_t__GUARD_INTERVAL_1_4 = 3, fe__fe_guard_interval_t__GUARD_INTERVAL_AUTO = 4};
#endif

#ifndef SOAP_TYPE_fe__fe_hierarchy_t
#define SOAP_TYPE_fe__fe_hierarchy_t (23)
/* fe:fe_hierarchy_t */
enum fe__fe_hierarchy_t {fe__fe_hierarchy_t__HIERARCHY_NONE = 0, fe__fe_hierarchy_t__HIERARCHY_1 = 1, fe__fe_hierarchy_t__HIERARCHY_2 = 2, fe__fe_hierarchy_t__HIERARCHY_4 = 3, fe__fe_hierarchy_t__HIERARCHY_AUTO = 4};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_fe__dvb_ofdm_parameters_t
#define SOAP_TYPE_fe__dvb_ofdm_parameters_t (10)
/* fe:dvb_ofdm_parameters_t */
class SOAP_CMAC fe__dvb_ofdm_parameters_t
{
public:
	enum fe__fe_bandwidth_t bandwidth;	/* required element of type fe:fe_bandwidth_t */
	enum fe__fe_code_rate_t code_rate_HP;	/* required element of type fe:fe_code_rate_t */
	enum fe__fe_code_rate_t code_rate_LP;	/* required element of type fe:fe_code_rate_t */
	enum fe__fe_modulation_t constellation;	/* required element of type fe:fe_modulation_t */
	enum fe__fe_transmit_mode_t transmission_mode;	/* required element of type fe:fe_transmit_mode_t */
	enum fe__fe_guard_interval_t guard_interval;	/* required element of type fe:fe_guard_interval_t */
	enum fe__fe_hierarchy_t hierarchy_information;	/* required element of type fe:fe_hierarchy_t */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_fe__dvb_ofdm_parameters_t */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         fe__dvb_ofdm_parameters_t(): soap(NULL) { fe__dvb_ofdm_parameters_t::soap_default(NULL); }
	virtual ~fe__dvb_ofdm_parameters_t() { }
};
#endif

#ifndef SOAP_TYPE__fe__fe_status
#define SOAP_TYPE__fe__fe_status (11)
/* fe:fe_status */
class SOAP_CMAC _fe__fe_status
{
public:
	enum fe__fe_status_t status;	/* required element of type fe:fe_status_t */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__fe__fe_status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _fe__fe_status(): soap(NULL) { _fe__fe_status::soap_default(NULL); }
	virtual ~_fe__fe_status() { }
};
#endif

#ifndef SOAP_TYPE__fe__dvb_frontend_info
#define SOAP_TYPE__fe__dvb_frontend_info (12)
/* fe:dvb_frontend_info */
class SOAP_CMAC _fe__dvb_frontend_info
{
public:
	std::string name;	/* required element of type xsd:string */
	enum fe__fe_type_t type;	/* required element of type fe:fe_type_t */
	std::string frequency_min;	/* required element of type xsd:unsignedInteger */
	std::string frequency_max;	/* required element of type xsd:unsignedInteger */
	std::string frequency_stepsize;	/* required element of type xsd:unsignedInteger */
	std::string frequency_tolerance;	/* required element of type xsd:unsignedInteger */
	std::string symbol_rate_min;	/* required element of type xsd:unsignedInteger */
	std::string symbol_rate_max;	/* required element of type xsd:unsignedInteger */
	std::string symbol_rate_tolerance;	/* required element of type xsd:unsignedInteger */
	std::string notifier_delay;	/* required element of type xsd:unsignedInteger */
	enum fe__fe_caps_t caps;	/* required element of type fe:fe_caps_t */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__fe__dvb_frontend_info */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _fe__dvb_frontend_info(): soap(NULL) { _fe__dvb_frontend_info::soap_default(NULL); }
	virtual ~_fe__dvb_frontend_info() { }
};
#endif

#ifndef SOAP_TYPE__fe__union_dvb_frontend_parameters
#define SOAP_TYPE__fe__union_dvb_frontend_parameters (26)
/* xsd:choice */
union _fe__union_dvb_frontend_parameters
{
#define SOAP_UNION__fe__union_dvb_frontend_parameters_ofdm	(1)
	fe__dvb_ofdm_parameters_t *ofdm;
};
#endif

#ifndef SOAP_TYPE__fe__dvb_frontend_parameters
#define SOAP_TYPE__fe__dvb_frontend_parameters (13)
/* fe:dvb_frontend_parameters */
class SOAP_CMAC _fe__dvb_frontend_parameters
{
public:
	std::string frequency;	/* required element of type xsd:unsignedInteger */
	enum fe__fe_spectral_inversion_t inversion;	/* required element of type fe:fe_spectral_inversion_t */
	int __union_dvb_frontend_parameters;	/* union discriminant (of union defined below) */
	union _fe__union_dvb_frontend_parameters union_dvb_frontend_parameters;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__fe__dvb_frontend_parameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _fe__dvb_frontend_parameters(): soap(NULL) { _fe__dvb_frontend_parameters::soap_default(NULL); }
	virtual ~_fe__dvb_frontend_parameters() { }
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (27)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (28)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (30)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (33)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (34)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__unsignedInteger
#define SOAP_TYPE_xsd__unsignedInteger (9)
typedef std::string xsd__unsignedInteger;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
