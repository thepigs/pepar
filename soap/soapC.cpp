/* soapC.cpp
   Generated by gSOAP 2.7.17 from fe_schema.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.17 2011-07-10 23:46:54 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_fe__fe_hierarchy_t:
		return soap_in_fe__fe_hierarchy_t(soap, NULL, NULL, "fe:fe_hierarchy_t");
	case SOAP_TYPE_fe__fe_guard_interval_t:
		return soap_in_fe__fe_guard_interval_t(soap, NULL, NULL, "fe:fe_guard_interval_t");
	case SOAP_TYPE_fe__fe_bandwidth_t:
		return soap_in_fe__fe_bandwidth_t(soap, NULL, NULL, "fe:fe_bandwidth_t");
	case SOAP_TYPE_fe__fe_transmit_mode_t:
		return soap_in_fe__fe_transmit_mode_t(soap, NULL, NULL, "fe:fe_transmit_mode_t");
	case SOAP_TYPE_fe__fe_modulation_t:
		return soap_in_fe__fe_modulation_t(soap, NULL, NULL, "fe:fe_modulation_t");
	case SOAP_TYPE_fe__fe_code_rate_t:
		return soap_in_fe__fe_code_rate_t(soap, NULL, NULL, "fe:fe_code_rate_t");
	case SOAP_TYPE_fe__fe_spectral_inversion_t:
		return soap_in_fe__fe_spectral_inversion_t(soap, NULL, NULL, "fe:fe_spectral_inversion_t");
	case SOAP_TYPE_fe__fe_type_t:
		return soap_in_fe__fe_type_t(soap, NULL, NULL, "fe:fe_type_t");
	case SOAP_TYPE_fe__fe_caps_t:
		return soap_in_fe__fe_caps_t(soap, NULL, NULL, "fe:fe_caps_t");
	case SOAP_TYPE_fe__fe_status_t:
		return soap_in_fe__fe_status_t(soap, NULL, NULL, "fe:fe_status_t");
	case SOAP_TYPE_fe__dvb_ofdm_parameters_t:
		return soap_in_fe__dvb_ofdm_parameters_t(soap, NULL, NULL, "fe:dvb_ofdm_parameters_t");
	case SOAP_TYPE_xsd__unsignedInteger:
		return soap_in_xsd__unsignedInteger(soap, NULL, NULL, "xsd:unsignedInteger");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTofe__dvb_ofdm_parameters_t:
		return soap_in_PointerTofe__dvb_ofdm_parameters_t(soap, NULL, NULL, "fe:dvb_ofdm_parameters_t");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "fe:dvb_ofdm_parameters_t"))
		{	*type = SOAP_TYPE_fe__dvb_ofdm_parameters_t;
			return soap_in_fe__dvb_ofdm_parameters_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInteger"))
		{	*type = SOAP_TYPE_xsd__unsignedInteger;
			return soap_in_xsd__unsignedInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_hierarchy_t"))
		{	*type = SOAP_TYPE_fe__fe_hierarchy_t;
			return soap_in_fe__fe_hierarchy_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_guard_interval_t"))
		{	*type = SOAP_TYPE_fe__fe_guard_interval_t;
			return soap_in_fe__fe_guard_interval_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_bandwidth_t"))
		{	*type = SOAP_TYPE_fe__fe_bandwidth_t;
			return soap_in_fe__fe_bandwidth_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_transmit_mode_t"))
		{	*type = SOAP_TYPE_fe__fe_transmit_mode_t;
			return soap_in_fe__fe_transmit_mode_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_modulation_t"))
		{	*type = SOAP_TYPE_fe__fe_modulation_t;
			return soap_in_fe__fe_modulation_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_code_rate_t"))
		{	*type = SOAP_TYPE_fe__fe_code_rate_t;
			return soap_in_fe__fe_code_rate_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_spectral_inversion_t"))
		{	*type = SOAP_TYPE_fe__fe_spectral_inversion_t;
			return soap_in_fe__fe_spectral_inversion_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_type_t"))
		{	*type = SOAP_TYPE_fe__fe_type_t;
			return soap_in_fe__fe_type_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_caps_t"))
		{	*type = SOAP_TYPE_fe__fe_caps_t;
			return soap_in_fe__fe_caps_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_status_t"))
		{	*type = SOAP_TYPE_fe__fe_status_t;
			return soap_in_fe__fe_status_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "fe:dvb_frontend_parameters"))
		{	*type = SOAP_TYPE__fe__dvb_frontend_parameters;
			return soap_in__fe__dvb_frontend_parameters(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:dvb_frontend_info"))
		{	*type = SOAP_TYPE__fe__dvb_frontend_info;
			return soap_in__fe__dvb_frontend_info(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fe:fe_status"))
		{	*type = SOAP_TYPE__fe__fe_status;
			return soap_in__fe__fe_status(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_fe__fe_hierarchy_t:
		return soap_out_fe__fe_hierarchy_t(soap, tag, id, (const enum fe__fe_hierarchy_t *)ptr, "fe:fe_hierarchy_t");
	case SOAP_TYPE_fe__fe_guard_interval_t:
		return soap_out_fe__fe_guard_interval_t(soap, tag, id, (const enum fe__fe_guard_interval_t *)ptr, "fe:fe_guard_interval_t");
	case SOAP_TYPE_fe__fe_bandwidth_t:
		return soap_out_fe__fe_bandwidth_t(soap, tag, id, (const enum fe__fe_bandwidth_t *)ptr, "fe:fe_bandwidth_t");
	case SOAP_TYPE_fe__fe_transmit_mode_t:
		return soap_out_fe__fe_transmit_mode_t(soap, tag, id, (const enum fe__fe_transmit_mode_t *)ptr, "fe:fe_transmit_mode_t");
	case SOAP_TYPE_fe__fe_modulation_t:
		return soap_out_fe__fe_modulation_t(soap, tag, id, (const enum fe__fe_modulation_t *)ptr, "fe:fe_modulation_t");
	case SOAP_TYPE_fe__fe_code_rate_t:
		return soap_out_fe__fe_code_rate_t(soap, tag, id, (const enum fe__fe_code_rate_t *)ptr, "fe:fe_code_rate_t");
	case SOAP_TYPE_fe__fe_spectral_inversion_t:
		return soap_out_fe__fe_spectral_inversion_t(soap, tag, id, (const enum fe__fe_spectral_inversion_t *)ptr, "fe:fe_spectral_inversion_t");
	case SOAP_TYPE_fe__fe_type_t:
		return soap_out_fe__fe_type_t(soap, tag, id, (const enum fe__fe_type_t *)ptr, "fe:fe_type_t");
	case SOAP_TYPE_fe__fe_caps_t:
		return soap_out_fe__fe_caps_t(soap, tag, id, (const enum fe__fe_caps_t *)ptr, "fe:fe_caps_t");
	case SOAP_TYPE_fe__fe_status_t:
		return soap_out_fe__fe_status_t(soap, tag, id, (const enum fe__fe_status_t *)ptr, "fe:fe_status_t");
	case SOAP_TYPE__fe__dvb_frontend_parameters:
		return ((_fe__dvb_frontend_parameters *)ptr)->soap_out(soap, "fe:dvb_frontend_parameters", id, NULL);
	case SOAP_TYPE__fe__dvb_frontend_info:
		return ((_fe__dvb_frontend_info *)ptr)->soap_out(soap, "fe:dvb_frontend_info", id, NULL);
	case SOAP_TYPE__fe__fe_status:
		return ((_fe__fe_status *)ptr)->soap_out(soap, "fe:fe_status", id, NULL);
	case SOAP_TYPE_fe__dvb_ofdm_parameters_t:
		return ((fe__dvb_ofdm_parameters_t *)ptr)->soap_out(soap, tag, id, "fe:dvb_ofdm_parameters_t");
	case SOAP_TYPE_xsd__unsignedInteger:
		return soap_out_xsd__unsignedInteger(soap, tag, id, (const std::string *)ptr, "xsd:unsignedInteger");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTofe__dvb_ofdm_parameters_t:
		return soap_out_PointerTofe__dvb_ofdm_parameters_t(soap, tag, id, (fe__dvb_ofdm_parameters_t *const*)ptr, "fe:dvb_ofdm_parameters_t");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__fe__dvb_frontend_parameters:
		((_fe__dvb_frontend_parameters *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__fe__dvb_frontend_info:
		((_fe__dvb_frontend_info *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__fe__fe_status:
		((_fe__fe_status *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_fe__dvb_ofdm_parameters_t:
		((fe__dvb_ofdm_parameters_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedInteger:
		soap_serialize_xsd__unsignedInteger(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_PointerTofe__dvb_ofdm_parameters_t:
		soap_serialize_PointerTofe__dvb_ofdm_parameters_t(soap, (fe__dvb_ofdm_parameters_t *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_fe__dvb_ofdm_parameters_t:
		return (void*)soap_instantiate_fe__dvb_ofdm_parameters_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE__fe__fe_status:
		return (void*)soap_instantiate__fe__fe_status(soap, -1, type, arrayType, n);
	case SOAP_TYPE__fe__dvb_frontend_info:
		return (void*)soap_instantiate__fe__dvb_frontend_info(soap, -1, type, arrayType, n);
	case SOAP_TYPE__fe__dvb_frontend_parameters:
		return (void*)soap_instantiate__fe__dvb_frontend_parameters(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__unsignedInteger:
		return (void*)soap_instantiate_xsd__unsignedInteger(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_fe__dvb_ofdm_parameters_t:
		if (p->size < 0)
			SOAP_DELETE((fe__dvb_ofdm_parameters_t*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fe__dvb_ofdm_parameters_t*)p->ptr);
		break;
	case SOAP_TYPE__fe__fe_status:
		if (p->size < 0)
			SOAP_DELETE((_fe__fe_status*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_fe__fe_status*)p->ptr);
		break;
	case SOAP_TYPE__fe__dvb_frontend_info:
		if (p->size < 0)
			SOAP_DELETE((_fe__dvb_frontend_info*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_fe__dvb_frontend_info*)p->ptr);
		break;
	case SOAP_TYPE__fe__dvb_frontend_parameters:
		if (p->size < 0)
			SOAP_DELETE((_fe__dvb_frontend_parameters*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_fe__dvb_frontend_parameters*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedInteger:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fe__fe_hierarchy_t(struct soap *soap, enum fe__fe_hierarchy_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fe__fe_hierarchy_t
	*a = SOAP_DEFAULT_fe__fe_hierarchy_t;
#else
	*a = (enum fe__fe_hierarchy_t)0;
#endif
}

static const struct soap_code_map soap_codes_fe__fe_hierarchy_t[] =
{	{ (long)fe__fe_hierarchy_t__HIERARCHY_NONE, "HIERARCHY_NONE" },
	{ (long)fe__fe_hierarchy_t__HIERARCHY_1, "HIERARCHY_1" },
	{ (long)fe__fe_hierarchy_t__HIERARCHY_2, "HIERARCHY_2" },
	{ (long)fe__fe_hierarchy_t__HIERARCHY_4, "HIERARCHY_4" },
	{ (long)fe__fe_hierarchy_t__HIERARCHY_AUTO, "HIERARCHY_AUTO" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fe__fe_hierarchy_t2s(struct soap *soap, enum fe__fe_hierarchy_t n)
{	const char *s = soap_code_str(soap_codes_fe__fe_hierarchy_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__fe_hierarchy_t(struct soap *soap, const char *tag, int id, const enum fe__fe_hierarchy_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__fe_hierarchy_t), type) || soap_send(soap, soap_fe__fe_hierarchy_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fe__fe_hierarchy_t(struct soap *soap, const char *s, enum fe__fe_hierarchy_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_fe__fe_hierarchy_t, s);
	if (map)
		*a = (enum fe__fe_hierarchy_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 4)))
			return soap->error = SOAP_TYPE;
		*a = (enum fe__fe_hierarchy_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum fe__fe_hierarchy_t * SOAP_FMAC4 soap_in_fe__fe_hierarchy_t(struct soap *soap, const char *tag, enum fe__fe_hierarchy_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum fe__fe_hierarchy_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_fe__fe_hierarchy_t, sizeof(enum fe__fe_hierarchy_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2fe__fe_hierarchy_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum fe__fe_hierarchy_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__fe_hierarchy_t, 0, sizeof(enum fe__fe_hierarchy_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fe__fe_hierarchy_t(struct soap *soap, const enum fe__fe_hierarchy_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_fe__fe_hierarchy_t);
	if (soap_out_fe__fe_hierarchy_t(soap, tag?tag:"fe:fe_hierarchy_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum fe__fe_hierarchy_t * SOAP_FMAC4 soap_get_fe__fe_hierarchy_t(struct soap *soap, enum fe__fe_hierarchy_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__fe_hierarchy_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fe__fe_guard_interval_t(struct soap *soap, enum fe__fe_guard_interval_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fe__fe_guard_interval_t
	*a = SOAP_DEFAULT_fe__fe_guard_interval_t;
#else
	*a = (enum fe__fe_guard_interval_t)0;
#endif
}

static const struct soap_code_map soap_codes_fe__fe_guard_interval_t[] =
{	{ (long)fe__fe_guard_interval_t__GUARD_INTERVAL_1_32, "GUARD_INTERVAL_1_32" },
	{ (long)fe__fe_guard_interval_t__GUARD_INTERVAL_1_16, "GUARD_INTERVAL_1_16" },
	{ (long)fe__fe_guard_interval_t__GUARD_INTERVAL_1_8, "GUARD_INTERVAL_1_8" },
	{ (long)fe__fe_guard_interval_t__GUARD_INTERVAL_1_4, "GUARD_INTERVAL_1_4" },
	{ (long)fe__fe_guard_interval_t__GUARD_INTERVAL_AUTO, "GUARD_INTERVAL_AUTO" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fe__fe_guard_interval_t2s(struct soap *soap, enum fe__fe_guard_interval_t n)
{	const char *s = soap_code_str(soap_codes_fe__fe_guard_interval_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__fe_guard_interval_t(struct soap *soap, const char *tag, int id, const enum fe__fe_guard_interval_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__fe_guard_interval_t), type) || soap_send(soap, soap_fe__fe_guard_interval_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fe__fe_guard_interval_t(struct soap *soap, const char *s, enum fe__fe_guard_interval_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_fe__fe_guard_interval_t, s);
	if (map)
		*a = (enum fe__fe_guard_interval_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 4)))
			return soap->error = SOAP_TYPE;
		*a = (enum fe__fe_guard_interval_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum fe__fe_guard_interval_t * SOAP_FMAC4 soap_in_fe__fe_guard_interval_t(struct soap *soap, const char *tag, enum fe__fe_guard_interval_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum fe__fe_guard_interval_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_fe__fe_guard_interval_t, sizeof(enum fe__fe_guard_interval_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2fe__fe_guard_interval_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum fe__fe_guard_interval_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__fe_guard_interval_t, 0, sizeof(enum fe__fe_guard_interval_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fe__fe_guard_interval_t(struct soap *soap, const enum fe__fe_guard_interval_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_fe__fe_guard_interval_t);
	if (soap_out_fe__fe_guard_interval_t(soap, tag?tag:"fe:fe_guard_interval_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum fe__fe_guard_interval_t * SOAP_FMAC4 soap_get_fe__fe_guard_interval_t(struct soap *soap, enum fe__fe_guard_interval_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__fe_guard_interval_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fe__fe_bandwidth_t(struct soap *soap, enum fe__fe_bandwidth_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fe__fe_bandwidth_t
	*a = SOAP_DEFAULT_fe__fe_bandwidth_t;
#else
	*a = (enum fe__fe_bandwidth_t)0;
#endif
}

static const struct soap_code_map soap_codes_fe__fe_bandwidth_t[] =
{	{ (long)fe__fe_bandwidth_t__BANDWIDTH_8_MHZ, "BANDWIDTH_8_MHZ" },
	{ (long)fe__fe_bandwidth_t__BANDWIDTH_7_MHZ, "BANDWIDTH_7_MHZ" },
	{ (long)fe__fe_bandwidth_t__BANDWIDTH_6_MHZ, "BANDWIDTH_6_MHZ" },
	{ (long)fe__fe_bandwidth_t__BANDWIDTH_AUTO, "BANDWIDTH_AUTO" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fe__fe_bandwidth_t2s(struct soap *soap, enum fe__fe_bandwidth_t n)
{	const char *s = soap_code_str(soap_codes_fe__fe_bandwidth_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__fe_bandwidth_t(struct soap *soap, const char *tag, int id, const enum fe__fe_bandwidth_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__fe_bandwidth_t), type) || soap_send(soap, soap_fe__fe_bandwidth_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fe__fe_bandwidth_t(struct soap *soap, const char *s, enum fe__fe_bandwidth_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_fe__fe_bandwidth_t, s);
	if (map)
		*a = (enum fe__fe_bandwidth_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum fe__fe_bandwidth_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum fe__fe_bandwidth_t * SOAP_FMAC4 soap_in_fe__fe_bandwidth_t(struct soap *soap, const char *tag, enum fe__fe_bandwidth_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum fe__fe_bandwidth_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_fe__fe_bandwidth_t, sizeof(enum fe__fe_bandwidth_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2fe__fe_bandwidth_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum fe__fe_bandwidth_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__fe_bandwidth_t, 0, sizeof(enum fe__fe_bandwidth_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fe__fe_bandwidth_t(struct soap *soap, const enum fe__fe_bandwidth_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_fe__fe_bandwidth_t);
	if (soap_out_fe__fe_bandwidth_t(soap, tag?tag:"fe:fe_bandwidth_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum fe__fe_bandwidth_t * SOAP_FMAC4 soap_get_fe__fe_bandwidth_t(struct soap *soap, enum fe__fe_bandwidth_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__fe_bandwidth_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fe__fe_transmit_mode_t(struct soap *soap, enum fe__fe_transmit_mode_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fe__fe_transmit_mode_t
	*a = SOAP_DEFAULT_fe__fe_transmit_mode_t;
#else
	*a = (enum fe__fe_transmit_mode_t)0;
#endif
}

static const struct soap_code_map soap_codes_fe__fe_transmit_mode_t[] =
{	{ (long)fe__fe_transmit_mode_t__TRANSMISSION_MODE_2K, "TRANSMISSION_MODE_2K" },
	{ (long)fe__fe_transmit_mode_t__TRANSMISSION_MODE_8K, "TRANSMISSION_MODE_8K" },
	{ (long)fe__fe_transmit_mode_t__TRANSMISSION_MODE_AUTO, "TRANSMISSION_MODE_AUTO" },
	{ (long)fe__fe_transmit_mode_t__TRANSMISSION_MODE_4K, "TRANSMISSION_MODE_4K" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fe__fe_transmit_mode_t2s(struct soap *soap, enum fe__fe_transmit_mode_t n)
{	const char *s = soap_code_str(soap_codes_fe__fe_transmit_mode_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__fe_transmit_mode_t(struct soap *soap, const char *tag, int id, const enum fe__fe_transmit_mode_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__fe_transmit_mode_t), type) || soap_send(soap, soap_fe__fe_transmit_mode_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fe__fe_transmit_mode_t(struct soap *soap, const char *s, enum fe__fe_transmit_mode_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_fe__fe_transmit_mode_t, s);
	if (map)
		*a = (enum fe__fe_transmit_mode_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum fe__fe_transmit_mode_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum fe__fe_transmit_mode_t * SOAP_FMAC4 soap_in_fe__fe_transmit_mode_t(struct soap *soap, const char *tag, enum fe__fe_transmit_mode_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum fe__fe_transmit_mode_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_fe__fe_transmit_mode_t, sizeof(enum fe__fe_transmit_mode_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2fe__fe_transmit_mode_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum fe__fe_transmit_mode_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__fe_transmit_mode_t, 0, sizeof(enum fe__fe_transmit_mode_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fe__fe_transmit_mode_t(struct soap *soap, const enum fe__fe_transmit_mode_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_fe__fe_transmit_mode_t);
	if (soap_out_fe__fe_transmit_mode_t(soap, tag?tag:"fe:fe_transmit_mode_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum fe__fe_transmit_mode_t * SOAP_FMAC4 soap_get_fe__fe_transmit_mode_t(struct soap *soap, enum fe__fe_transmit_mode_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__fe_transmit_mode_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fe__fe_modulation_t(struct soap *soap, enum fe__fe_modulation_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fe__fe_modulation_t
	*a = SOAP_DEFAULT_fe__fe_modulation_t;
#else
	*a = (enum fe__fe_modulation_t)0;
#endif
}

static const struct soap_code_map soap_codes_fe__fe_modulation_t[] =
{	{ (long)fe__fe_modulation_t__QPSK, "QPSK" },
	{ (long)fe__fe_modulation_t__QAM_16, "QAM_16" },
	{ (long)fe__fe_modulation_t__QAM_32, "QAM_32" },
	{ (long)fe__fe_modulation_t__QAM_64, "QAM_64" },
	{ (long)fe__fe_modulation_t__QAM_128, "QAM_128" },
	{ (long)fe__fe_modulation_t__QAM_256, "QAM_256" },
	{ (long)fe__fe_modulation_t__QAM_AUTO, "QAM_AUTO" },
	{ (long)fe__fe_modulation_t__VSB_8, "VSB_8" },
	{ (long)fe__fe_modulation_t__VSB_16, "VSB_16" },
	{ (long)fe__fe_modulation_t__PSK_8, "PSK_8" },
	{ (long)fe__fe_modulation_t__APSK_16, "APSK_16" },
	{ (long)fe__fe_modulation_t__APSK_32, "APSK_32" },
	{ (long)fe__fe_modulation_t__DQPSK, "DQPSK" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fe__fe_modulation_t2s(struct soap *soap, enum fe__fe_modulation_t n)
{	const char *s = soap_code_str(soap_codes_fe__fe_modulation_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__fe_modulation_t(struct soap *soap, const char *tag, int id, const enum fe__fe_modulation_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__fe_modulation_t), type) || soap_send(soap, soap_fe__fe_modulation_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fe__fe_modulation_t(struct soap *soap, const char *s, enum fe__fe_modulation_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_fe__fe_modulation_t, s);
	if (map)
		*a = (enum fe__fe_modulation_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 12)))
			return soap->error = SOAP_TYPE;
		*a = (enum fe__fe_modulation_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum fe__fe_modulation_t * SOAP_FMAC4 soap_in_fe__fe_modulation_t(struct soap *soap, const char *tag, enum fe__fe_modulation_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum fe__fe_modulation_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_fe__fe_modulation_t, sizeof(enum fe__fe_modulation_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2fe__fe_modulation_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum fe__fe_modulation_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__fe_modulation_t, 0, sizeof(enum fe__fe_modulation_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fe__fe_modulation_t(struct soap *soap, const enum fe__fe_modulation_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_fe__fe_modulation_t);
	if (soap_out_fe__fe_modulation_t(soap, tag?tag:"fe:fe_modulation_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum fe__fe_modulation_t * SOAP_FMAC4 soap_get_fe__fe_modulation_t(struct soap *soap, enum fe__fe_modulation_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__fe_modulation_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fe__fe_code_rate_t(struct soap *soap, enum fe__fe_code_rate_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fe__fe_code_rate_t
	*a = SOAP_DEFAULT_fe__fe_code_rate_t;
#else
	*a = (enum fe__fe_code_rate_t)0;
#endif
}

static const struct soap_code_map soap_codes_fe__fe_code_rate_t[] =
{	{ (long)fe__fe_code_rate_t__FEC_NONE, "FEC_NONE" },
	{ (long)fe__fe_code_rate_t__FEC_1_2, "FEC_1_2" },
	{ (long)fe__fe_code_rate_t__FEC_2_3, "FEC_2_3" },
	{ (long)fe__fe_code_rate_t__FEC_3_4, "FEC_3_4" },
	{ (long)fe__fe_code_rate_t__FEC_4_5, "FEC_4_5" },
	{ (long)fe__fe_code_rate_t__FEC_5_6, "FEC_5_6" },
	{ (long)fe__fe_code_rate_t__FEC_6_7, "FEC_6_7" },
	{ (long)fe__fe_code_rate_t__FEC_8_9, "FEC_8_9" },
	{ (long)fe__fe_code_rate_t__FEC_3_5, "FEC_3_5" },
	{ (long)fe__fe_code_rate_t__FEC_9_10, "FEC_9_10" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fe__fe_code_rate_t2s(struct soap *soap, enum fe__fe_code_rate_t n)
{	const char *s = soap_code_str(soap_codes_fe__fe_code_rate_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__fe_code_rate_t(struct soap *soap, const char *tag, int id, const enum fe__fe_code_rate_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__fe_code_rate_t), type) || soap_send(soap, soap_fe__fe_code_rate_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fe__fe_code_rate_t(struct soap *soap, const char *s, enum fe__fe_code_rate_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_fe__fe_code_rate_t, s);
	if (map)
		*a = (enum fe__fe_code_rate_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 9)))
			return soap->error = SOAP_TYPE;
		*a = (enum fe__fe_code_rate_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum fe__fe_code_rate_t * SOAP_FMAC4 soap_in_fe__fe_code_rate_t(struct soap *soap, const char *tag, enum fe__fe_code_rate_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum fe__fe_code_rate_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_fe__fe_code_rate_t, sizeof(enum fe__fe_code_rate_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2fe__fe_code_rate_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum fe__fe_code_rate_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__fe_code_rate_t, 0, sizeof(enum fe__fe_code_rate_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fe__fe_code_rate_t(struct soap *soap, const enum fe__fe_code_rate_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_fe__fe_code_rate_t);
	if (soap_out_fe__fe_code_rate_t(soap, tag?tag:"fe:fe_code_rate_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum fe__fe_code_rate_t * SOAP_FMAC4 soap_get_fe__fe_code_rate_t(struct soap *soap, enum fe__fe_code_rate_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__fe_code_rate_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fe__fe_spectral_inversion_t(struct soap *soap, enum fe__fe_spectral_inversion_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fe__fe_spectral_inversion_t
	*a = SOAP_DEFAULT_fe__fe_spectral_inversion_t;
#else
	*a = (enum fe__fe_spectral_inversion_t)0;
#endif
}

static const struct soap_code_map soap_codes_fe__fe_spectral_inversion_t[] =
{	{ (long)fe__fe_spectral_inversion_t__INVERSION_OFF, "INVERSION_OFF" },
	{ (long)fe__fe_spectral_inversion_t__INVERSION_ON, "INVERSION_ON" },
	{ (long)fe__fe_spectral_inversion_t__INVERSION_AUTO, "INVERSION_AUTO" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fe__fe_spectral_inversion_t2s(struct soap *soap, enum fe__fe_spectral_inversion_t n)
{	const char *s = soap_code_str(soap_codes_fe__fe_spectral_inversion_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__fe_spectral_inversion_t(struct soap *soap, const char *tag, int id, const enum fe__fe_spectral_inversion_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__fe_spectral_inversion_t), type) || soap_send(soap, soap_fe__fe_spectral_inversion_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fe__fe_spectral_inversion_t(struct soap *soap, const char *s, enum fe__fe_spectral_inversion_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_fe__fe_spectral_inversion_t, s);
	if (map)
		*a = (enum fe__fe_spectral_inversion_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum fe__fe_spectral_inversion_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum fe__fe_spectral_inversion_t * SOAP_FMAC4 soap_in_fe__fe_spectral_inversion_t(struct soap *soap, const char *tag, enum fe__fe_spectral_inversion_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum fe__fe_spectral_inversion_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_fe__fe_spectral_inversion_t, sizeof(enum fe__fe_spectral_inversion_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2fe__fe_spectral_inversion_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum fe__fe_spectral_inversion_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__fe_spectral_inversion_t, 0, sizeof(enum fe__fe_spectral_inversion_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fe__fe_spectral_inversion_t(struct soap *soap, const enum fe__fe_spectral_inversion_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_fe__fe_spectral_inversion_t);
	if (soap_out_fe__fe_spectral_inversion_t(soap, tag?tag:"fe:fe_spectral_inversion_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum fe__fe_spectral_inversion_t * SOAP_FMAC4 soap_get_fe__fe_spectral_inversion_t(struct soap *soap, enum fe__fe_spectral_inversion_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__fe_spectral_inversion_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fe__fe_type_t(struct soap *soap, enum fe__fe_type_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fe__fe_type_t
	*a = SOAP_DEFAULT_fe__fe_type_t;
#else
	*a = (enum fe__fe_type_t)0;
#endif
}

static const struct soap_code_map soap_codes_fe__fe_type_t[] =
{	{ (long)fe__fe_type_t__FE_QPSK, "FE_QPSK" },
	{ (long)fe__fe_type_t__FE_QAM, "FE_QAM" },
	{ (long)fe__fe_type_t__FE_OFDM, "FE_OFDM" },
	{ (long)fe__fe_type_t__FE_ATSC, "FE_ATSC" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fe__fe_type_t2s(struct soap *soap, enum fe__fe_type_t n)
{	const char *s = soap_code_str(soap_codes_fe__fe_type_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__fe_type_t(struct soap *soap, const char *tag, int id, const enum fe__fe_type_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__fe_type_t), type) || soap_send(soap, soap_fe__fe_type_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fe__fe_type_t(struct soap *soap, const char *s, enum fe__fe_type_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_fe__fe_type_t, s);
	if (map)
		*a = (enum fe__fe_type_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum fe__fe_type_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum fe__fe_type_t * SOAP_FMAC4 soap_in_fe__fe_type_t(struct soap *soap, const char *tag, enum fe__fe_type_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum fe__fe_type_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_fe__fe_type_t, sizeof(enum fe__fe_type_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2fe__fe_type_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum fe__fe_type_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__fe_type_t, 0, sizeof(enum fe__fe_type_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fe__fe_type_t(struct soap *soap, const enum fe__fe_type_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_fe__fe_type_t);
	if (soap_out_fe__fe_type_t(soap, tag?tag:"fe:fe_type_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum fe__fe_type_t * SOAP_FMAC4 soap_get_fe__fe_type_t(struct soap *soap, enum fe__fe_type_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__fe_type_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fe__fe_caps_t(struct soap *soap, enum fe__fe_caps_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fe__fe_caps_t
	*a = SOAP_DEFAULT_fe__fe_caps_t;
#else
	*a = (enum fe__fe_caps_t)0;
#endif
}

static const struct soap_code_map soap_codes_fe__fe_caps_t[] =
{	{ (long)fe__fe_caps_t__FE_IS_STUPID, "FE_IS_STUPID" },
	{ (long)fe__fe_caps_t__FE_CAN_INVERSION_AUTO, "FE_CAN_INVERSION_AUTO" },
	{ (long)fe__fe_caps_t__FE_CAN_FEC_1_2, "FE_CAN_FEC_1_2" },
	{ (long)fe__fe_caps_t__FE_CAN_FEC_2_3, "FE_CAN_FEC_2_3" },
	{ (long)fe__fe_caps_t__FE_CAN_FEC_3_4, "FE_CAN_FEC_3_4" },
	{ (long)fe__fe_caps_t__FE_CAN_FEC_4_5, "FE_CAN_FEC_4_5" },
	{ (long)fe__fe_caps_t__FE_CAN_FEC_5_6, "FE_CAN_FEC_5_6" },
	{ (long)fe__fe_caps_t__FE_CAN_FEC_6_7, "FE_CAN_FEC_6_7" },
	{ (long)fe__fe_caps_t__FE_CAN_FEC_7_8, "FE_CAN_FEC_7_8" },
	{ (long)fe__fe_caps_t__FE_CAN_FEC_8_9, "FE_CAN_FEC_8_9" },
	{ (long)fe__fe_caps_t__FE_CAN_FEC_AUTO, "FE_CAN_FEC_AUTO" },
	{ (long)fe__fe_caps_t__FE_CAN_QPSK, "FE_CAN_QPSK" },
	{ (long)fe__fe_caps_t__FE_CAN_QAM_16, "FE_CAN_QAM_16" },
	{ (long)fe__fe_caps_t__FE_CAN_QAM_32, "FE_CAN_QAM_32" },
	{ (long)fe__fe_caps_t__FE_CAN_QAM_64, "FE_CAN_QAM_64" },
	{ (long)fe__fe_caps_t__FE_CAN_QAM_128, "FE_CAN_QAM_128" },
	{ (long)fe__fe_caps_t__FE_CAN_QAM_256, "FE_CAN_QAM_256" },
	{ (long)fe__fe_caps_t__FE_CAN_QAM_AUTO, "FE_CAN_QAM_AUTO" },
	{ (long)fe__fe_caps_t__FE_CAN_TRANSMISSION_MODE_AUTO, "FE_CAN_TRANSMISSION_MODE_AUTO" },
	{ (long)fe__fe_caps_t__FE_CAN_BANDWIDTH_AUTO, "FE_CAN_BANDWIDTH_AUTO" },
	{ (long)fe__fe_caps_t__FE_CAN_GUARD_INTERVAL_AUTO, "FE_CAN_GUARD_INTERVAL_AUTO" },
	{ (long)fe__fe_caps_t__FE_CAN_HIERARCHY_AUTO, "FE_CAN_HIERARCHY_AUTO" },
	{ (long)fe__fe_caps_t__FE_CAN_8VSB, "FE_CAN_8VSB" },
	{ (long)fe__fe_caps_t__FE_CAN_16VSB, "FE_CAN_16VSB" },
	{ (long)fe__fe_caps_t__FE_HAS_EXTENDED_CAPS, "FE_HAS_EXTENDED_CAPS" },
	{ (long)fe__fe_caps_t__FE_CAN_2G_MODULATION, "FE_CAN_2G_MODULATION" },
	{ (long)fe__fe_caps_t__FE_NEEDS_BENDING, "FE_NEEDS_BENDING" },
	{ (long)fe__fe_caps_t__FE_CAN_RECOVER, "FE_CAN_RECOVER" },
	{ (long)fe__fe_caps_t__FE_CAN_MUTE_TS, "FE_CAN_MUTE_TS" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fe__fe_caps_t2s(struct soap *soap, enum fe__fe_caps_t n)
{
	return soap_code_list(soap, soap_codes_fe__fe_caps_t, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__fe_caps_t(struct soap *soap, const char *tag, int id, const enum fe__fe_caps_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__fe_caps_t), type) || soap_send(soap, soap_fe__fe_caps_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fe__fe_caps_t(struct soap *soap, const char *s, enum fe__fe_caps_t *a)
{
	*a = (enum fe__fe_caps_t)soap_code_bits(soap_codes_fe__fe_caps_t, s);
	return SOAP_OK;
}

SOAP_FMAC3 enum fe__fe_caps_t * SOAP_FMAC4 soap_in_fe__fe_caps_t(struct soap *soap, const char *tag, enum fe__fe_caps_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum fe__fe_caps_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_fe__fe_caps_t, sizeof(enum fe__fe_caps_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2fe__fe_caps_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum fe__fe_caps_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__fe_caps_t, 0, sizeof(enum fe__fe_caps_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fe__fe_caps_t(struct soap *soap, const enum fe__fe_caps_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_fe__fe_caps_t);
	if (soap_out_fe__fe_caps_t(soap, tag?tag:"fe:fe_caps_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum fe__fe_caps_t * SOAP_FMAC4 soap_get_fe__fe_caps_t(struct soap *soap, enum fe__fe_caps_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__fe_caps_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fe__fe_status_t(struct soap *soap, enum fe__fe_status_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fe__fe_status_t
	*a = SOAP_DEFAULT_fe__fe_status_t;
#else
	*a = (enum fe__fe_status_t)0;
#endif
}

static const struct soap_code_map soap_codes_fe__fe_status_t[] =
{	{ (long)fe__fe_status_t__FE_HAS_SIGNAL, "FE_HAS_SIGNAL" },
	{ (long)fe__fe_status_t__FE_HAS_CARRIER, "FE_HAS_CARRIER" },
	{ (long)fe__fe_status_t__FE_HAS_VITERBI, "FE_HAS_VITERBI" },
	{ (long)fe__fe_status_t__FE_HAS_SYNC, "FE_HAS_SYNC" },
	{ (long)fe__fe_status_t__FE_HAS_LOCK, "FE_HAS_LOCK" },
	{ (long)fe__fe_status_t__FE_TIMEDOUT, "FE_TIMEDOUT" },
	{ (long)fe__fe_status_t__FE_REINIT, "FE_REINIT" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fe__fe_status_t2s(struct soap *soap, enum fe__fe_status_t n)
{
	return soap_code_list(soap, soap_codes_fe__fe_status_t, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__fe_status_t(struct soap *soap, const char *tag, int id, const enum fe__fe_status_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__fe_status_t), type) || soap_send(soap, soap_fe__fe_status_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fe__fe_status_t(struct soap *soap, const char *s, enum fe__fe_status_t *a)
{
	*a = (enum fe__fe_status_t)soap_code_bits(soap_codes_fe__fe_status_t, s);
	return SOAP_OK;
}

SOAP_FMAC3 enum fe__fe_status_t * SOAP_FMAC4 soap_in_fe__fe_status_t(struct soap *soap, const char *tag, enum fe__fe_status_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum fe__fe_status_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_fe__fe_status_t, sizeof(enum fe__fe_status_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2fe__fe_status_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum fe__fe_status_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__fe_status_t, 0, sizeof(enum fe__fe_status_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fe__fe_status_t(struct soap *soap, const enum fe__fe_status_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_fe__fe_status_t);
	if (soap_out_fe__fe_status_t(soap, tag?tag:"fe:fe_status_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum fe__fe_status_t * SOAP_FMAC4 soap_get_fe__fe_status_t(struct soap *soap, enum fe__fe_status_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__fe_status_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _fe__dvb_frontend_parameters::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_parameters::frequency);
	soap_default_fe__fe_spectral_inversion_t(soap, &this->_fe__dvb_frontend_parameters::inversion);
	this->_fe__dvb_frontend_parameters::__union_dvb_frontend_parameters = 0;
	/* transient soap skipped */
}

void _fe__dvb_frontend_parameters::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_parameters::frequency);
	soap_serialize__fe__union_dvb_frontend_parameters(soap, this->_fe__dvb_frontend_parameters::__union_dvb_frontend_parameters, &this->_fe__dvb_frontend_parameters::union_dvb_frontend_parameters);
	/* transient soap skipped */
}

int _fe__dvb_frontend_parameters::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__fe__dvb_frontend_parameters(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fe__dvb_frontend_parameters(struct soap *soap, const char *tag, int id, const _fe__dvb_frontend_parameters *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__fe__dvb_frontend_parameters), type))
		return soap->error;
	if (soap_out_xsd__unsignedInteger(soap, "frequency", -1, &(a->_fe__dvb_frontend_parameters::frequency), ""))
		return soap->error;
	if (soap_out_fe__fe_spectral_inversion_t(soap, "inversion", -1, &(a->_fe__dvb_frontend_parameters::inversion), ""))
		return soap->error;
	if (soap_out__fe__union_dvb_frontend_parameters(soap, a->_fe__dvb_frontend_parameters::__union_dvb_frontend_parameters, &a->_fe__dvb_frontend_parameters::union_dvb_frontend_parameters))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_fe__dvb_frontend_parameters::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__fe__dvb_frontend_parameters(soap, tag, this, type);
}

SOAP_FMAC3 _fe__dvb_frontend_parameters * SOAP_FMAC4 soap_in__fe__dvb_frontend_parameters(struct soap *soap, const char *tag, _fe__dvb_frontend_parameters *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_fe__dvb_frontend_parameters *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__fe__dvb_frontend_parameters, sizeof(_fe__dvb_frontend_parameters), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__fe__dvb_frontend_parameters)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_fe__dvb_frontend_parameters *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_frequency1 = 1;
	size_t soap_flag_inversion1 = 1;
	size_t soap_flag_union_dvb_frontend_parameters1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_frequency1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__unsignedInteger(soap, "frequency", &(a->_fe__dvb_frontend_parameters::frequency), "xsd:unsignedInteger"))
				{	soap_flag_frequency1--;
					continue;
				}
			if (soap_flag_inversion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_spectral_inversion_t(soap, "inversion", &(a->_fe__dvb_frontend_parameters::inversion), "fe:fe_spectral_inversion_t"))
				{	soap_flag_inversion1--;
					continue;
				}
			if (soap_flag_union_dvb_frontend_parameters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__fe__union_dvb_frontend_parameters(soap, &a->_fe__dvb_frontend_parameters::__union_dvb_frontend_parameters, &a->_fe__dvb_frontend_parameters::union_dvb_frontend_parameters))
				{	soap_flag_union_dvb_frontend_parameters1 = 0;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_fe__dvb_frontend_parameters *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__fe__dvb_frontend_parameters, 0, sizeof(_fe__dvb_frontend_parameters), 0, soap_copy__fe__dvb_frontend_parameters);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_frequency1 > 0 || soap_flag_inversion1 > 0 || soap_flag_union_dvb_frontend_parameters1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _fe__dvb_frontend_parameters::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__fe__dvb_frontend_parameters);
	if (this->soap_out(soap, tag?tag:"fe:dvb_frontend_parameters", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_fe__dvb_frontend_parameters::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__fe__dvb_frontend_parameters(soap, this, tag, type);
}

SOAP_FMAC3 _fe__dvb_frontend_parameters * SOAP_FMAC4 soap_get__fe__dvb_frontend_parameters(struct soap *soap, _fe__dvb_frontend_parameters *p, const char *tag, const char *type)
{
	if ((p = soap_in__fe__dvb_frontend_parameters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _fe__dvb_frontend_parameters * SOAP_FMAC2 soap_instantiate__fe__dvb_frontend_parameters(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__fe__dvb_frontend_parameters(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__fe__dvb_frontend_parameters, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_fe__dvb_frontend_parameters);
		if (size)
			*size = sizeof(_fe__dvb_frontend_parameters);
		((_fe__dvb_frontend_parameters*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_fe__dvb_frontend_parameters[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_fe__dvb_frontend_parameters);
		for (int i = 0; i < n; i++)
			((_fe__dvb_frontend_parameters*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_fe__dvb_frontend_parameters*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fe__dvb_frontend_parameters(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _fe__dvb_frontend_parameters %p -> %p\n", q, p));
	*(_fe__dvb_frontend_parameters*)p = *(_fe__dvb_frontend_parameters*)q;
}

void _fe__dvb_frontend_info::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_fe__dvb_frontend_info::name);
	soap_default_fe__fe_type_t(soap, &this->_fe__dvb_frontend_info::type);
	soap_default_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::frequency_min);
	soap_default_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::frequency_max);
	soap_default_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::frequency_stepsize);
	soap_default_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::frequency_tolerance);
	soap_default_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::symbol_rate_min);
	soap_default_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::symbol_rate_max);
	soap_default_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::symbol_rate_tolerance);
	soap_default_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::notifier_delay);
	soap_default_fe__fe_caps_t(soap, &this->_fe__dvb_frontend_info::caps);
	/* transient soap skipped */
}

void _fe__dvb_frontend_info::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_fe__dvb_frontend_info::name);
	soap_serialize_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::frequency_min);
	soap_serialize_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::frequency_max);
	soap_serialize_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::frequency_stepsize);
	soap_serialize_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::frequency_tolerance);
	soap_serialize_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::symbol_rate_min);
	soap_serialize_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::symbol_rate_max);
	soap_serialize_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::symbol_rate_tolerance);
	soap_serialize_xsd__unsignedInteger(soap, &this->_fe__dvb_frontend_info::notifier_delay);
	/* transient soap skipped */
}

int _fe__dvb_frontend_info::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__fe__dvb_frontend_info(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fe__dvb_frontend_info(struct soap *soap, const char *tag, int id, const _fe__dvb_frontend_info *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__fe__dvb_frontend_info), type))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &(a->_fe__dvb_frontend_info::name), ""))
		return soap->error;
	if (soap_out_fe__fe_type_t(soap, "type", -1, &(a->_fe__dvb_frontend_info::type), ""))
		return soap->error;
	if (soap_out_xsd__unsignedInteger(soap, "frequency_min", -1, &(a->_fe__dvb_frontend_info::frequency_min), ""))
		return soap->error;
	if (soap_out_xsd__unsignedInteger(soap, "frequency_max", -1, &(a->_fe__dvb_frontend_info::frequency_max), ""))
		return soap->error;
	if (soap_out_xsd__unsignedInteger(soap, "frequency_stepsize", -1, &(a->_fe__dvb_frontend_info::frequency_stepsize), ""))
		return soap->error;
	if (soap_out_xsd__unsignedInteger(soap, "frequency_tolerance", -1, &(a->_fe__dvb_frontend_info::frequency_tolerance), ""))
		return soap->error;
	if (soap_out_xsd__unsignedInteger(soap, "symbol_rate_min", -1, &(a->_fe__dvb_frontend_info::symbol_rate_min), ""))
		return soap->error;
	if (soap_out_xsd__unsignedInteger(soap, "symbol_rate_max", -1, &(a->_fe__dvb_frontend_info::symbol_rate_max), ""))
		return soap->error;
	if (soap_out_xsd__unsignedInteger(soap, "symbol_rate_tolerance", -1, &(a->_fe__dvb_frontend_info::symbol_rate_tolerance), ""))
		return soap->error;
	if (soap_out_xsd__unsignedInteger(soap, "notifier_delay", -1, &(a->_fe__dvb_frontend_info::notifier_delay), ""))
		return soap->error;
	if (soap_out_fe__fe_caps_t(soap, "caps", -1, &(a->_fe__dvb_frontend_info::caps), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_fe__dvb_frontend_info::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__fe__dvb_frontend_info(soap, tag, this, type);
}

SOAP_FMAC3 _fe__dvb_frontend_info * SOAP_FMAC4 soap_in__fe__dvb_frontend_info(struct soap *soap, const char *tag, _fe__dvb_frontend_info *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_fe__dvb_frontend_info *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__fe__dvb_frontend_info, sizeof(_fe__dvb_frontend_info), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__fe__dvb_frontend_info)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_fe__dvb_frontend_info *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_type1 = 1;
	size_t soap_flag_frequency_min1 = 1;
	size_t soap_flag_frequency_max1 = 1;
	size_t soap_flag_frequency_stepsize1 = 1;
	size_t soap_flag_frequency_tolerance1 = 1;
	size_t soap_flag_symbol_rate_min1 = 1;
	size_t soap_flag_symbol_rate_max1 = 1;
	size_t soap_flag_symbol_rate_tolerance1 = 1;
	size_t soap_flag_notifier_delay1 = 1;
	size_t soap_flag_caps1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &(a->_fe__dvb_frontend_info::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_type_t(soap, "type", &(a->_fe__dvb_frontend_info::type), "fe:fe_type_t"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap_flag_frequency_min1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__unsignedInteger(soap, "frequency_min", &(a->_fe__dvb_frontend_info::frequency_min), "xsd:unsignedInteger"))
				{	soap_flag_frequency_min1--;
					continue;
				}
			if (soap_flag_frequency_max1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__unsignedInteger(soap, "frequency_max", &(a->_fe__dvb_frontend_info::frequency_max), "xsd:unsignedInteger"))
				{	soap_flag_frequency_max1--;
					continue;
				}
			if (soap_flag_frequency_stepsize1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__unsignedInteger(soap, "frequency_stepsize", &(a->_fe__dvb_frontend_info::frequency_stepsize), "xsd:unsignedInteger"))
				{	soap_flag_frequency_stepsize1--;
					continue;
				}
			if (soap_flag_frequency_tolerance1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__unsignedInteger(soap, "frequency_tolerance", &(a->_fe__dvb_frontend_info::frequency_tolerance), "xsd:unsignedInteger"))
				{	soap_flag_frequency_tolerance1--;
					continue;
				}
			if (soap_flag_symbol_rate_min1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__unsignedInteger(soap, "symbol_rate_min", &(a->_fe__dvb_frontend_info::symbol_rate_min), "xsd:unsignedInteger"))
				{	soap_flag_symbol_rate_min1--;
					continue;
				}
			if (soap_flag_symbol_rate_max1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__unsignedInteger(soap, "symbol_rate_max", &(a->_fe__dvb_frontend_info::symbol_rate_max), "xsd:unsignedInteger"))
				{	soap_flag_symbol_rate_max1--;
					continue;
				}
			if (soap_flag_symbol_rate_tolerance1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__unsignedInteger(soap, "symbol_rate_tolerance", &(a->_fe__dvb_frontend_info::symbol_rate_tolerance), "xsd:unsignedInteger"))
				{	soap_flag_symbol_rate_tolerance1--;
					continue;
				}
			if (soap_flag_notifier_delay1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__unsignedInteger(soap, "notifier_delay", &(a->_fe__dvb_frontend_info::notifier_delay), "xsd:unsignedInteger"))
				{	soap_flag_notifier_delay1--;
					continue;
				}
			if (soap_flag_caps1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_caps_t(soap, "caps", &(a->_fe__dvb_frontend_info::caps), "fe:fe_caps_t"))
				{	soap_flag_caps1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_fe__dvb_frontend_info *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__fe__dvb_frontend_info, 0, sizeof(_fe__dvb_frontend_info), 0, soap_copy__fe__dvb_frontend_info);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_name1 > 0 || soap_flag_type1 > 0 || soap_flag_frequency_min1 > 0 || soap_flag_frequency_max1 > 0 || soap_flag_frequency_stepsize1 > 0 || soap_flag_frequency_tolerance1 > 0 || soap_flag_symbol_rate_min1 > 0 || soap_flag_symbol_rate_max1 > 0 || soap_flag_symbol_rate_tolerance1 > 0 || soap_flag_notifier_delay1 > 0 || soap_flag_caps1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _fe__dvb_frontend_info::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__fe__dvb_frontend_info);
	if (this->soap_out(soap, tag?tag:"fe:dvb_frontend_info", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_fe__dvb_frontend_info::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__fe__dvb_frontend_info(soap, this, tag, type);
}

SOAP_FMAC3 _fe__dvb_frontend_info * SOAP_FMAC4 soap_get__fe__dvb_frontend_info(struct soap *soap, _fe__dvb_frontend_info *p, const char *tag, const char *type)
{
	if ((p = soap_in__fe__dvb_frontend_info(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _fe__dvb_frontend_info * SOAP_FMAC2 soap_instantiate__fe__dvb_frontend_info(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__fe__dvb_frontend_info(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__fe__dvb_frontend_info, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_fe__dvb_frontend_info);
		if (size)
			*size = sizeof(_fe__dvb_frontend_info);
		((_fe__dvb_frontend_info*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_fe__dvb_frontend_info[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_fe__dvb_frontend_info);
		for (int i = 0; i < n; i++)
			((_fe__dvb_frontend_info*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_fe__dvb_frontend_info*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fe__dvb_frontend_info(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _fe__dvb_frontend_info %p -> %p\n", q, p));
	*(_fe__dvb_frontend_info*)p = *(_fe__dvb_frontend_info*)q;
}

void _fe__fe_status::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_fe__fe_status_t(soap, &this->_fe__fe_status::status);
	/* transient soap skipped */
}

void _fe__fe_status::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _fe__fe_status::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__fe__fe_status(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fe__fe_status(struct soap *soap, const char *tag, int id, const _fe__fe_status *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__fe__fe_status), type))
		return soap->error;
	if (soap_out_fe__fe_status_t(soap, "status", -1, &(a->_fe__fe_status::status), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_fe__fe_status::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__fe__fe_status(soap, tag, this, type);
}

SOAP_FMAC3 _fe__fe_status * SOAP_FMAC4 soap_in__fe__fe_status(struct soap *soap, const char *tag, _fe__fe_status *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_fe__fe_status *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__fe__fe_status, sizeof(_fe__fe_status), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__fe__fe_status)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_fe__fe_status *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_status_t(soap, "status", &(a->_fe__fe_status::status), "fe:fe_status_t"))
				{	soap_flag_status1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_fe__fe_status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__fe__fe_status, 0, sizeof(_fe__fe_status), 0, soap_copy__fe__fe_status);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _fe__fe_status::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__fe__fe_status);
	if (this->soap_out(soap, tag?tag:"fe:fe_status", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_fe__fe_status::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__fe__fe_status(soap, this, tag, type);
}

SOAP_FMAC3 _fe__fe_status * SOAP_FMAC4 soap_get__fe__fe_status(struct soap *soap, _fe__fe_status *p, const char *tag, const char *type)
{
	if ((p = soap_in__fe__fe_status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _fe__fe_status * SOAP_FMAC2 soap_instantiate__fe__fe_status(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__fe__fe_status(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__fe__fe_status, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_fe__fe_status);
		if (size)
			*size = sizeof(_fe__fe_status);
		((_fe__fe_status*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_fe__fe_status[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_fe__fe_status);
		for (int i = 0; i < n; i++)
			((_fe__fe_status*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_fe__fe_status*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fe__fe_status(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _fe__fe_status %p -> %p\n", q, p));
	*(_fe__fe_status*)p = *(_fe__fe_status*)q;
}

void fe__dvb_ofdm_parameters_t::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_fe__fe_bandwidth_t(soap, &this->fe__dvb_ofdm_parameters_t::bandwidth);
	soap_default_fe__fe_code_rate_t(soap, &this->fe__dvb_ofdm_parameters_t::code_rate_HP);
	soap_default_fe__fe_code_rate_t(soap, &this->fe__dvb_ofdm_parameters_t::code_rate_LP);
	soap_default_fe__fe_modulation_t(soap, &this->fe__dvb_ofdm_parameters_t::constellation);
	soap_default_fe__fe_transmit_mode_t(soap, &this->fe__dvb_ofdm_parameters_t::transmission_mode);
	soap_default_fe__fe_guard_interval_t(soap, &this->fe__dvb_ofdm_parameters_t::guard_interval);
	soap_default_fe__fe_hierarchy_t(soap, &this->fe__dvb_ofdm_parameters_t::hierarchy_information);
	/* transient soap skipped */
}

void fe__dvb_ofdm_parameters_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int fe__dvb_ofdm_parameters_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fe__dvb_ofdm_parameters_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fe__dvb_ofdm_parameters_t(struct soap *soap, const char *tag, int id, const fe__dvb_ofdm_parameters_t *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_fe__dvb_ofdm_parameters_t), type))
		return soap->error;
	if (soap_out_fe__fe_bandwidth_t(soap, "bandwidth", -1, &(a->fe__dvb_ofdm_parameters_t::bandwidth), ""))
		return soap->error;
	if (soap_out_fe__fe_code_rate_t(soap, "code_rate_HP", -1, &(a->fe__dvb_ofdm_parameters_t::code_rate_HP), ""))
		return soap->error;
	if (soap_out_fe__fe_code_rate_t(soap, "code_rate_LP", -1, &(a->fe__dvb_ofdm_parameters_t::code_rate_LP), ""))
		return soap->error;
	if (soap_out_fe__fe_modulation_t(soap, "constellation", -1, &(a->fe__dvb_ofdm_parameters_t::constellation), ""))
		return soap->error;
	if (soap_out_fe__fe_transmit_mode_t(soap, "transmission_mode", -1, &(a->fe__dvb_ofdm_parameters_t::transmission_mode), ""))
		return soap->error;
	if (soap_out_fe__fe_guard_interval_t(soap, "guard_interval", -1, &(a->fe__dvb_ofdm_parameters_t::guard_interval), ""))
		return soap->error;
	if (soap_out_fe__fe_hierarchy_t(soap, "hierarchy_information", -1, &(a->fe__dvb_ofdm_parameters_t::hierarchy_information), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fe__dvb_ofdm_parameters_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fe__dvb_ofdm_parameters_t(soap, tag, this, type);
}

SOAP_FMAC3 fe__dvb_ofdm_parameters_t * SOAP_FMAC4 soap_in_fe__dvb_ofdm_parameters_t(struct soap *soap, const char *tag, fe__dvb_ofdm_parameters_t *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fe__dvb_ofdm_parameters_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_fe__dvb_ofdm_parameters_t, sizeof(fe__dvb_ofdm_parameters_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_fe__dvb_ofdm_parameters_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fe__dvb_ofdm_parameters_t *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_bandwidth1 = 1;
	size_t soap_flag_code_rate_HP1 = 1;
	size_t soap_flag_code_rate_LP1 = 1;
	size_t soap_flag_constellation1 = 1;
	size_t soap_flag_transmission_mode1 = 1;
	size_t soap_flag_guard_interval1 = 1;
	size_t soap_flag_hierarchy_information1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_bandwidth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_bandwidth_t(soap, "bandwidth", &(a->fe__dvb_ofdm_parameters_t::bandwidth), "fe:fe_bandwidth_t"))
				{	soap_flag_bandwidth1--;
					continue;
				}
			if (soap_flag_code_rate_HP1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_code_rate_t(soap, "code_rate_HP", &(a->fe__dvb_ofdm_parameters_t::code_rate_HP), "fe:fe_code_rate_t"))
				{	soap_flag_code_rate_HP1--;
					continue;
				}
			if (soap_flag_code_rate_LP1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_code_rate_t(soap, "code_rate_LP", &(a->fe__dvb_ofdm_parameters_t::code_rate_LP), "fe:fe_code_rate_t"))
				{	soap_flag_code_rate_LP1--;
					continue;
				}
			if (soap_flag_constellation1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_modulation_t(soap, "constellation", &(a->fe__dvb_ofdm_parameters_t::constellation), "fe:fe_modulation_t"))
				{	soap_flag_constellation1--;
					continue;
				}
			if (soap_flag_transmission_mode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_transmit_mode_t(soap, "transmission_mode", &(a->fe__dvb_ofdm_parameters_t::transmission_mode), "fe:fe_transmit_mode_t"))
				{	soap_flag_transmission_mode1--;
					continue;
				}
			if (soap_flag_guard_interval1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_guard_interval_t(soap, "guard_interval", &(a->fe__dvb_ofdm_parameters_t::guard_interval), "fe:fe_guard_interval_t"))
				{	soap_flag_guard_interval1--;
					continue;
				}
			if (soap_flag_hierarchy_information1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_fe__fe_hierarchy_t(soap, "hierarchy_information", &(a->fe__dvb_ofdm_parameters_t::hierarchy_information), "fe:fe_hierarchy_t"))
				{	soap_flag_hierarchy_information1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fe__dvb_ofdm_parameters_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_fe__dvb_ofdm_parameters_t, 0, sizeof(fe__dvb_ofdm_parameters_t), 0, soap_copy_fe__dvb_ofdm_parameters_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_bandwidth1 > 0 || soap_flag_code_rate_HP1 > 0 || soap_flag_code_rate_LP1 > 0 || soap_flag_constellation1 > 0 || soap_flag_transmission_mode1 > 0 || soap_flag_guard_interval1 > 0 || soap_flag_hierarchy_information1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int fe__dvb_ofdm_parameters_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_fe__dvb_ofdm_parameters_t);
	if (this->soap_out(soap, tag?tag:"fe:dvb_ofdm_parameters_t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fe__dvb_ofdm_parameters_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fe__dvb_ofdm_parameters_t(soap, this, tag, type);
}

SOAP_FMAC3 fe__dvb_ofdm_parameters_t * SOAP_FMAC4 soap_get_fe__dvb_ofdm_parameters_t(struct soap *soap, fe__dvb_ofdm_parameters_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_fe__dvb_ofdm_parameters_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fe__dvb_ofdm_parameters_t * SOAP_FMAC2 soap_instantiate_fe__dvb_ofdm_parameters_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fe__dvb_ofdm_parameters_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_fe__dvb_ofdm_parameters_t, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fe__dvb_ofdm_parameters_t);
		if (size)
			*size = sizeof(fe__dvb_ofdm_parameters_t);
		((fe__dvb_ofdm_parameters_t*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fe__dvb_ofdm_parameters_t[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fe__dvb_ofdm_parameters_t);
		for (int i = 0; i < n; i++)
			((fe__dvb_ofdm_parameters_t*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fe__dvb_ofdm_parameters_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fe__dvb_ofdm_parameters_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fe__dvb_ofdm_parameters_t %p -> %p\n", q, p));
	*(fe__dvb_ofdm_parameters_t*)p = *(fe__dvb_ofdm_parameters_t*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInteger(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__unsignedInteger), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__unsignedInteger(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__unsignedInteger, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__unsignedInteger, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__unsignedInteger, 0, sizeof(std::string), 0, soap_copy_xsd__unsignedInteger);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedInteger(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedInteger);
	if (soap_out_xsd__unsignedInteger(soap, tag?tag:"xsd:unsignedInteger", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__unsignedInteger(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedInteger(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fe__union_dvb_frontend_parameters(struct soap *soap, int choice, const union _fe__union_dvb_frontend_parameters *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION__fe__union_dvb_frontend_parameters_ofdm:
		soap_serialize_PointerTofe__dvb_ofdm_parameters_t(soap, &a->ofdm);
		break;
	default:
		break;
	}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fe__union_dvb_frontend_parameters(struct soap *soap, int choice, const union _fe__union_dvb_frontend_parameters *a)
{
	switch (choice)
	{
	case SOAP_UNION__fe__union_dvb_frontend_parameters_ofdm:
		return soap_out_PointerTofe__dvb_ofdm_parameters_t(soap, "ofdm", -1, &a->ofdm, "");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _fe__union_dvb_frontend_parameters * SOAP_FMAC4 soap_in__fe__union_dvb_frontend_parameters(struct soap *soap, int *choice, union _fe__union_dvb_frontend_parameters *a)
{	soap->error = SOAP_TAG_MISMATCH;
	a->ofdm = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTofe__dvb_ofdm_parameters_t(soap, "ofdm", &a->ofdm, "fe:dvb_ofdm_parameters_t"))
	{	*choice = SOAP_UNION__fe__union_dvb_frontend_parameters_ofdm;
		return a;
	}
	*choice = 0;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofe__dvb_ofdm_parameters_t(struct soap *soap, fe__dvb_ofdm_parameters_t *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_fe__dvb_ofdm_parameters_t))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofe__dvb_ofdm_parameters_t(struct soap *soap, const char *tag, int id, fe__dvb_ofdm_parameters_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_fe__dvb_ofdm_parameters_t);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fe__dvb_ofdm_parameters_t ** SOAP_FMAC4 soap_in_PointerTofe__dvb_ofdm_parameters_t(struct soap *soap, const char *tag, fe__dvb_ofdm_parameters_t **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fe__dvb_ofdm_parameters_t **)soap_malloc(soap, sizeof(fe__dvb_ofdm_parameters_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fe__dvb_ofdm_parameters_t *)soap_instantiate_fe__dvb_ofdm_parameters_t(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fe__dvb_ofdm_parameters_t ** p = (fe__dvb_ofdm_parameters_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_fe__dvb_ofdm_parameters_t, sizeof(fe__dvb_ofdm_parameters_t), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofe__dvb_ofdm_parameters_t(struct soap *soap, fe__dvb_ofdm_parameters_t *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTofe__dvb_ofdm_parameters_t);
	if (soap_out_PointerTofe__dvb_ofdm_parameters_t(soap, tag?tag:"fe:dvb_ofdm_parameters_t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fe__dvb_ofdm_parameters_t ** SOAP_FMAC4 soap_get_PointerTofe__dvb_ofdm_parameters_t(struct soap *soap, fe__dvb_ofdm_parameters_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofe__dvb_ofdm_parameters_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
